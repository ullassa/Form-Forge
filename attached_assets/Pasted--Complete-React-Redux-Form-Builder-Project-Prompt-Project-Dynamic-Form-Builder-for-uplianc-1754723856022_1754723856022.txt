# Complete React + Redux Form Builder Project Prompt

## Project: Dynamic Form Builder for upliance.ai Assignment

### **Objective**
Create a professional-grade dynamic form builder application using React, TypeScript, Redux, and Material-UI that allows users to create, configure, preview, and manage forms with advanced features including derived fields and comprehensive validation.

### **Technical Stack**
- **Frontend**: React 18+ with TypeScript
- **State Management**: Redux Toolkit
- **UI Framework**: Material-UI (MUI)
- **Routing**: React Router v6
- **Storage**: localStorage
- **Validation**: Custom validation engine
- **Build Tool**: Vite or Create React App

### **Application Requirements**

#### **1. Routing Structure**
```
/create - Form builder interface
/preview - Form preview and testing
/myforms - Saved forms management
```

#### **2. Core Features**

##### **Form Builder (/create)**
- **Field Types**: Text, Number, Textarea, Select, Radio, Checkbox, Date
- **Field Configuration**:
  - Label customization
  - Required field toggle
  - Default value setting
  - Validation rules (not empty, min/max length, email, password)
- **Derived Fields**:
  - Parent field selection
  - Formula/logic definition
  - Auto-calculation (e.g., Age from Date of Birth)
- **Form Management**:
  - Drag-and-drop field reordering
  - Field deletion
  - Form saving with custom names
  - Schema persistence in localStorage

##### **Preview (/preview)**
- Real-time form rendering
- Interactive field inputs
- Live validation with error messages
- Derived field auto-updates
- End-user experience simulation

##### **My Forms (/myforms)**
- Saved forms listing
- Form metadata display (name, creation date)
- Form preview access
- Form management options

### **Implementation Details**

#### **TypeScript Interfaces**
```typescript
interface FormField {
  id: string;
  type: 'text' | 'number' | 'textarea' | 'select' | 'radio' | 'checkbox' | 'date';
  label: string;
  required: boolean;
  defaultValue?: any;
  validationRules: ValidationRule[];
  isDerived: boolean;
  derivedConfig?: DerivedFieldConfig;
  order: number;
  options?: string[];
}

interface FormSchema {
  id: string;
  name: string;
  createdAt: string;
  fields: FormField[];
}

interface ValidationRule {
  type: string;
  value?: any;
  message: string;
}
```

#### **Redux Store Structure**
- **formBuilderSlice**: Current form creation state
- **previewSlice**: Form preview and validation state
- **savedFormsSlice**: Persisted forms management

#### **Component Architecture**
- **FormBuilder**: Main form creation interface
- **FieldConfigPanel**: Field property configuration
- **DynamicFieldRenderer**: Runtime field rendering
- **ValidationEngine**: Real-time validation system
- **DerivedFieldCalculator**: Parent-child field computations

### **Key Implementation Features**

#### **1. Validation System**
- Real-time field validation
- Custom validation rules engine
- Error message display
- Form-level validation status

#### **2. Derived Fields**
- Parent field dependency tracking
- Formula evaluation system
- Auto-update mechanism
- Age calculation from date of birth example

#### **3. Data Persistence**
- localStorage integration
- Form schema serialization
- Data retrieval and management
- Migration handling

#### **4. User Experience**
- Intuitive drag-and-drop interface
- Responsive design
- Loading states
- Error handling
- Clean, professional UI

### **Technical Requirements**
- **TypeScript**: Strict mode with comprehensive type safety
- **Code Quality**: ESLint, Prettier configuration
- **Testing**: Unit tests for core functionality
- **Performance**: Optimized rendering and state updates
- **Accessibility**: WCAG compliance
- **Browser Support**: Modern browsers (Chrome, Firefox, Safari, Edge)

### **Project Structure**
```
src/
├── components/
│   ├── FormBuilder/
│   ├── FieldComponents/
│   ├── Preview/
│   └── MyForms/
├── store/
│   ├── slices/
│   └── types/
├── utils/
├── hooks/
├── pages/
└── constants/
```

### **Evaluation Criteria**
1. **Code Quality**: Clean, modular, maintainable code
2. **TypeScript Usage**: Effective type safety implementation
3. **State Management**: Predictable Redux architecture
4. **User Experience**: Intuitive, responsive interface
5. **Feature Completeness**: All requirements implemented
6. **Error Handling**: Graceful edge case management
7. **Performance**: Optimized rendering and updates

### **Deliverables**
- Complete React TypeScript application
- Deployed live demo (Vercel/Netlify)
- Public GitHub repository
- Comprehensive README documentation
- Professional code structure ready for production

### **Success Metrics**
- All three routes fully functional
- Complete field type support
- Working derived fields system
- Comprehensive validation
- Professional UI/UX
- Clean, documented codebase
- Ready for immediate deployment

This project demonstrates advanced React development skills, TypeScript proficiency, Redux state management expertise, and ability to build complex, user-friendly applications suitable for a modern startup environment.